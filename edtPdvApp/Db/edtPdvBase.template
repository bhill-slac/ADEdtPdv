#
# Base record set common to all EDT PDV based cameras
#
# Required macros:
#	P				- Prefix
#	R				- Region, common camera PV prefix is $(P)$(R)
#	PORT			- Asyn port name
# Optional macros
#	TIMEOUT			- Defaults to 1 sec
#	CAM_MODE		- Base, Medium, or Full. Defaults to Base
#
# These are needed only if you want to use Edt PV's to set
# and monitor event code trigger timing.
#	CAM_EC			- PV to set camera event code
#	CAM_EC_RBV		- PV to get camera event code
#	CAM_DLY			- PV to set camera event delay in sec
#	CAM_DLY_EGU		- EGU for   camera event delay values, defaults to sec
#	CAM_DLY_RBV		- PV to get camera event delay in sec
#	CAM_RATE_RBV	- PV to get camera event code rep rate in Hz
#	EVR_DLY_SCALE	- Scale factor for cam delay to evr delay, default 1000000000 for ns
#	EVR_DLY_EGU		- EGU for   camera event delay values, defaults to ns
#	BEAM_EC			- PV to set beam   event code
#	BEAM_RATE_RBV	- PV to get beam   event code rep rate in Hz
#

# Disable these records from ADBase.template as they are readback only based
# on the current configuration and can only be changed by changing the config file
record( mbbo, "$(P)$(R)DataType"			) { field( DISA, "1" ) }
record( mbbo, "$(P)$(R)ColorMode"			) { field( DISA, "1" ) }

# Disable AcquirePeriod from ADBase.template as the EDT framegrabber
# and most EDT cameras don't support it
# Camera models which support AcquirePeriod should set DISA back to 0
record( ao, "$(P)$(R)AcquirePeriod"			) { field( DISA, "1" ) }
record( ai, "$(P)$(R)AcquirePeriod_RBV"		) { field( DISA, "1" ) }

# This record should be overridden in $MODEL.db, replacing "UknownModel" with
# the chosen camera model.
# PINI is NO here so PV status is UDF, but should be set to YES in $MODEL.db
record( stringin, "$(P)$(R)EdtModel" )
{
	field( VAL,  "UnknownModel" )
	field( PINI, "NO" )
}
record( stringin, "$(P)$(R)EdtModelScreen" )
{
	field( VAL,  "edtPdvScreens/UnknownModel.edl" )
	field( PINI, "NO" )
}

# TODO:  We need a generic EdtReConfigCount PV here that
# gets incremented each time the driver reconfigures the camera.
# That PV could be monitored by camera specific PV's w/ PINI YES
# that currently only get one read attempt at ioc boot time.
# For cameras w/ sketchy serial support, we currently get occasional
# failures reading these status related PV's such as firmware version
# and there's no mechanism to force a retry.
record( longout, $(P)$(R)EdtReConfigCount )
{
#	field( DTYP, "asynInt32" )
#	field( OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))RECFG_CNT" )
	field( SCAN, "I/O Intr" )
}

#
# Propagate the gain through the EDT layer
record( ao, "$(P)$(R)Gain" )
{
	field( FLNK, "$(P)$(R)EdtGain" )
}
record( ao, "$(P)$(R)EdtGain" )
{
	field( DTYP, "asynFloat64" )
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)Gain NPP MS" )
	field( OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_GAIN" )
#	field( TPRO, "2" )
}
record( ao, "$(P)$(R)EdtGain_RBV" )
{
	field( DTYP, "asynFloat64" )
	field( OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_GAIN" )
#	field( TPRO, "2" )
}

record( ao, "$(P)$(R)AcquireTime" )
{
#	field( TPRO, "2" )
	field( FLNK, "$(P)$(R)EdtAcquireTime" )
}

# EdtAcquireTime (Exposure Time)
# This record updates the EDT asyn serial driver
record( ao, "$(P)$(R)EdtAcquireTime" )
{
#	field( TPRO, 2 )
	field( DTYP, "asynFloat64" )
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)AcquireTime NPP MS" )
	field( OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_ACQUIRE_TIME" )
	info( archiveFields,  "VAL" )
}
# EdtAcquireTime_RBV (Exposure Time)
# This record updates the EDT asyn serial driver
# which maps it to ADCore's ADAcquireTime parameter
record( ao, "$(P)$(R)EdtAcquireTime_RBV" )
{
	field( DTYP, "asynFloat64" )
	field( OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_ACQUIRE_TIME" )
	field( EGU,  "sec" )
#	field( TPRO, "2" )
}

# Update ADCore AcquireTime_RBV from EdtAcquireTime_RBV
# This overrides the default precision for the
# ADCore AcquireTime readback
record( ai, "$(P)$(R)AcquireTime_RBV" )
{
	field( PREC, "5" )

	field( DTYP, "Soft Channel" )
	field( INP,  "$(P)$(R)EdtAcquireTime_RBV CP MS" )
	field( SCAN, "Passive" )
#	field( TPRO, "2" )
}

#
# Handle framegrabber hardware ROI Min and Size for X and Y dimensions
#
# Note: EdtMinX is a longin record instead of longout, while
# EdtMinX_RBV is longout.  This is the opposite pattern of most
# ADCore record names, as these are used to communicate between
# ADCore and the camera specific ROI PV's.
# Same logic applies to the other HW ROI related PV's
record( longin, "$(P)$(R)EdtMinX" )
{
	field( DTYP, "asynInt32" )
	field( INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_MIN_X" )
	field( SCAN, "I/O Intr" )
	info( autosaveFields, "" )
}
record( longout, "$(P)$(R)EdtMinX_RBV" )
{
	field( DTYP, "asynInt32" )
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)EdtMinX CPP MS" )
	field( OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_MIN_X" )
}
record( longin, "$(P)$(R)EdtSizeX" )
{
	field( DTYP, "asynInt32" )
	field( INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_SIZE_X" )
	field( SCAN, "I/O Intr" )
	info( autosaveFields, "" )
}
record( longout, "$(P)$(R)EdtSizeX_RBV" )
{
	field( DTYP, "asynInt32" )
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)EdtSizeX CPP MS" )
	field( OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_SIZE_X" )
	info( autosaveFields, "" )
}
record( longin, "$(P)$(R)EdtMinY" )
{
	field( DTYP, "asynInt32" )
	field( INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_MIN_Y" )
	field( SCAN, "I/O Intr" )
	info( autosaveFields, "" )
}
record( longout, "$(P)$(R)EdtMinY_RBV" )
{
	field( DTYP, "asynInt32" )
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)EdtMinY CPP MS" )
	field( OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_MIN_Y" )
	info( autosaveFields, "" )
}
record( longin, "$(P)$(R)EdtSizeY" )
{
	field( DTYP, "asynInt32" )
	field( INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_SIZE_Y" )
	field( SCAN, "I/O Intr" )
	field( FLNK, "$(P)$(R)EdtSizeY_RBV" )
	info( autosaveFields, "" )
}
record( longout, "$(P)$(R)EdtSizeY_RBV" )
{
	field( DTYP, "asynInt32" )
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)EdtSizeY NPP MS" )
	field( OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_SIZE_Y" )
	info( autosaveFields, "" )
}

record( longin, "$(P)$(R)HTaps_RBV" )
{
	field( DTYP,  "asynInt32" )
	field( INP,   "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_HTAPS" )
	field( SCAN, "I/O Intr" )
	info( archiveFields,  "VAL" )
}

record( longin, "$(P)$(R)VTaps_RBV" )
{
	field( DTYP, "asynInt32" )
	field( INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_VTAPS" )
	field( SCAN, "I/O Intr" )
	info( archiveFields, "VAL" )
}

record( mbbi, "$(P)$(R)EdtMode_RBV" )
{
	field( DTYP, "asynInt32" )
	field( INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_MODE" )
	field( ZRST, "Base" )
	field( ZRVL, "0" )
	field( ONST, "Medium" )
	field( ONVL, "1" )
	field( TWST, "Full" )
	field( TWVL, "2" )
	field( SCAN, "I/O Intr" )
	info( archiveFields,  "VAL" )
}

record( stringin, "$(P)$(R)EdtClass" )
{
	field( DTYP, "asynOctetRead" )
	field( INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_CLASS" )
	field( SCAN, "I/O Intr" )
	info( archiveFields,  "VAL" )
}

record( stringin, "$(P)$(R)EdtDrvVersion" )
{
	field( DTYP, "asynOctetRead" )
	field( INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_DRV_VERSION" )
	field( SCAN, "I/O Intr" )
	info( archiveFields,  "VAL" )
}

record( stringin, "$(P)$(R)EdtLibVersion" )
{
	field( DTYP, "asynOctetRead" )
	field( INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_LIB_VERSION" )
	field( SCAN, "I/O Intr" )
	info( archiveFields,  "VAL" )
}

record( stringin, "$(P)$(R)EdtInfo" )
{
	field( DTYP, "asynOctetRead" )
	field( INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_INFO" )
	field( SCAN, "I/O Intr" )
	info( archiveFields,  "VAL" )
}

record( mbbi, "$(P)$(R)EdtOverrun" )
{
	field( DTYP, "asynInt32" )
	field( INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_OVERRUN" )
	field( ZRST, "OK"		) field( ZRVL, "0" ) field( ZRSV, "NO_ALARM" )
	field( ONST, "Overrun"	) field( ONVL, "1" ) field( ONSV, "MAJOR" )
	field( SCAN, "I/O Intr" )
	info( autosaveFields,  "DESC ONSV ZRSV" )
	info( archiveFields,  "DESC ONSV VAL ZRSV" )
}

record( longout, "$(P)$(R)EdtDebugLevel" )
{
	field( DTYP, "asynInt32" )
	field( OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_DEBUG" )
	field( PINI, "YES" )
	field( DOL,	"0" )
	field( FLNK, "$(P)$(R)EdtDebugLevel_RBV" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR VAL" )
	info( archiveFields,  "VAL" )
}

record( longin, "$(P)$(R)EdtDebugLevel_RBV" )
{
	field( DTYP, "asynInt32" )
	field( INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_DEBUG" )
	field( SCAN, "I/O Intr" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR" )
	info( archiveFields,  "VAL" )
}

record( longout, "$(P)$(R)EdtDebugMsgLevel" )
{
	field( DTYP, "asynInt32" )
	field( OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_DEBUG_MSG" )
	field( PINI, "YES" )
	field( DOL,	"0" )
	field( FLNK, "$(P)$(R)EdtDebugMsgLevel_RBV" )
	info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

record( longin, "$(P)$(R)EdtDebugMsgLevel_RBV" )
{
	field( DTYP, "asynInt32" )
	field( INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_DEBUG_MSG" )
	field( SCAN, "I/O Intr" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR" )
	info( archiveFields,  "VAL" )
}

record( longout, "$(P)$(R)EdtHSkip" )
{
	field( DTYP, "asynInt32" )
	field( OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_HSKIP" )
	info( archiveFields,  "VAL" )
}

record( longout, "$(P)$(R)EdtHSize" )
{
	field( DTYP, "asynInt32" )
	field( OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_HSIZE" )
	info( archiveFields,  "VAL" )
}

record( longout, "$(P)$(R)EdtVSkip" )
{
	field( DTYP, "asynInt32" )
	field( OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_VSKIP" )
	info( archiveFields,  "VAL" )
}

record( longout, "$(P)$(R)EdtVSize" )
{
	field( DTYP, "asynInt32" )
	field( OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_VSIZE" )
	info( archiveFields,  "VAL" )
}

record( mbbo, "$(P)$(R)EdtTrigLevel" )
{
	field( DTYP, "asynInt32" )
	field( OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_TRIG_LEVEL" )
	field( PINI, "YES" )
	field( ZRST, "Edge" )
	field( ZRVL, "0" )
	field( ONST, "Level" )
	field( ONVL, "1" )
	field( TWST, "Sync" )
	field( TWVL, "2" )
	info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

#record( mbbi, "$(P)$(R)EdtTrigLevel_RBV" )
#{
#	field( DTYP, "asynInt32" )
#	field( INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_TRIG_LEVEL" )
#	field( PINI, "YES" )
#	field( ZRST, "Edge" )
#	field( ZRVL, "0" )
#	field( ONST, "Level" )
#	field( ONVL, "1" )
#	field( TWST, "Sync" )
#	field( TWVL, "2" )
#	field( SCAN, "I/O Intr" )
#	info( archiveFields,  "VAL" )
#}

# Replace ADBase TriggerMode fields w/ EDT specific options
record( mbbo, "$(P)$(R)TriggerMode" )
{
#	field( TPRO, 2 )
	field( ZRVL, "0" )	field( ZRST, "FreeRun" )
	field( ONVL, "1" )	field( ONST, "External" )
	field( TWVL, "2" )	field( TWST, "Pulse" )
}
# Replace ADBase TriggerMode_RBV fields w/ EDT options
record( mbbi, "$(P)$(R)TriggerMode_RBV" )
{
#	field( TPRO, 2 )
	field( ZRVL, "0" )	field( ZRST, "FreeRun" )
	field( ONVL, "1" )	field( ONST, "External" )
	field( TWVL, "2" )	field( TWST, "Pulse" )
}
# EdtTriggerMode should not be FLNK'd from TriggerMode, as it shouldn't
# get processed till we've shutdown acquisition.
# Note also it needs to be an input record so it processes via I/O Scan
# once camera is reconfigured.
record( mbbi, "$(P)$(R)EdtTriggerMode" )
{
#	field( TPRO, 2 )
	field( DTYP, "asynInt32" )
#	field( OMSL, "closed_loop" )
#	field( DOL,  "$(P)$(R)TriggerMode NPP MS" )
#	field( OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_TRIGGER_MODE" )
	field( INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_TRIGGER_MODE" )
	field( ZRVL, "0" )	field( ZRST, "FreeRun" )
	field( ONVL, "1" )	field( ONST, "External" )
	field( TWVL, "2" )	field( TWST, "Pulse" )
	field( SCAN, "I/O Intr" )
	info( archiveFields,  "DESC" )
}
record( mbbo, "$(P)$(R)EdtTriggerMode_RBV" )
{
#	field( TPRO, 2 )
	field( DTYP, "asynInt32" )
	field( OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))EDT_TRIGGER_MODE" )
	field( ZRVL, "0" )	field( ZRST, "FreeRun" )
	field( ONVL, "1" )	field( ONST, "External" )
	field( TWVL, "2" )	field( TWST, "Pulse" )
#	field( FLNK, "$(P)$(R)TriggerMode_RBV" )
	info( archiveFields,  "DESC" )
}

# TODO: Add Pulse Width based AcquireTime support here

# These PV's are needed only if you want to use Edt PV's to set
# and monitor event code trigger timing.
#	CAM_EC			- PV to set camera event code
#	CAM_EC_RBV		- PV to get camera event code
#	CAM_DLY			- PV to set camera event delay in sec
#	CAM_DLY_EGU		- EGU for   camera event delay values, defaults to sec
#	CAM_DLY_RBV		- PV to get camera event delay in sec
#	CAM_RATE_RBV	- PV to get camera event code rep rate in Hz
#	EVR_DLY_SCALE	- Scale factor for cam delay to evr delay, default 1000000000 for ns
#	EVR_DLY_EGU		- EGU for   camera event delay values, defaults to ns
#	BEAM_EC			- PV to set beam   event code
#	BEAM_RATE_RBV	- PV to get camera event code rep rate in Hz
record( longout, "$(P)$(R)EdtDelayScale" )
{
	field( DOL,  "$(EVR_DLY_SCALE=1000000000)" )
	field( EGU,  "$(EVR_DLY_EGU=ns)" )
	field( PINI, "YES" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR VAL" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR VAL" )
}
record( longout, "$(P)$(R)EdtCamEventCode" )
{
	field( VAL,  "40" )
	field( OUT,  "$(CAM_EC=Unused) CPP NMS" )
	field( PINI, "YES" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR VAL" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR VAL" )
}
record( longin, "$(P)$(R)EdtCamEventCode_RBV" )
{
	field( INP,  "$(CAM_EC_RBV=Unused) CPP MS" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC VAL" )
}
record( ao, "$(P)$(R)EdtCamTrigDelay" )
{
	field( PINI, "YES" )
	field( EGU,  "$(CAM_DLY_EGU=sec)" )
	field( PREC, "4" )
	field( EGU,  "sec" )
	field( FLNK, "$(P)$(R)EdtCamTrigDelayCalc" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR PREC VAL" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR PREC VAL" )
}
record( calcout, "$(P)$(R)EdtCamTrigDelayCalc" )
{
	field( INPA, "$(P)$(R)EdtCamTrigDelay NPP MS" )
	field( INPB, "$(P)$(R)EdtDelayScale CPP MS" )
	field( CALC, "A*B" )
	field( OUT,  "$(CAM_DLY=Unused) CPP NMS" )
	field( EGU,  "$(CAM_DLY_EGU=sec)" )
	field( PREC, "4" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC VAL" )
}
record( calc, "$(P)$(R)EdtCamTrigDelay_RBV" )
{
	field( INPA, "$(CAM_DLY_RBV=Unused) CPP MS" )
	field( INPB, "$(P)$(R)EdtDelayScale CPP MS" )
	field( CALC, "B==0?A:(A/B)" )
	field( EGU,  "$(CAM_DLY_EGU=sec)" )
	field( PREC, "4" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC VAL" )
}
record( ai, "$(P)$(R)EdtCamRepRate_RBV" )
{
	field( INP, "$(CAM_RATE_RBV=Unused) CPP MS" )
	field( EGU,  "Hz" )
	field( PREC, "1" )
	field( FLNK, "$(P)$(R)EdtCamRepDur" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC VAL" )
}
record( calc, "$(P)$(R)EdtCamRepDur" )
{
	field( INPA, "$(P)$(R)EdtCamRepRate_RBV CPP MS" )
	field( CALC, "A==0?10:(1/A)" )
	field( EGU,  "sec" )
	field( PREC, "3" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC VAL" )
}
record( longout, "$(P)$(R)EdtBeamEventCode" )
{
	field( VAL,  "140" )
	field( PINI, "YES" )
	field( OUT,  "$(BEAM_EC=Unused) CPP NMS" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR VAL" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR VAL" )
}
record( ai, "$(P)$(R)EdtBeamRepRate_RBV" )
{
	field( INP,  "$(BEAM_RATE_RBV=Unused) CPP MS" )
	field( EGU,  "Hz" )
	field( PREC, "1" )
	field( FLNK, "$(P)$(R)EdtBeamRepDur" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC VAL" )
}
record( calc, "$(P)$(R)EdtBeamRepDur" )
{
	field( INPA, "$(P)$(R)EdtBeamRepRate_RBV CPP MS" )
	field( CALC, "A==0?10:(1/A)" )
	field( EGU,  "sec" )
	field( PREC, "3" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC VAL" )
}
