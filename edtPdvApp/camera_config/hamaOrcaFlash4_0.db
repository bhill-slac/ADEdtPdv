#
# Hamamatsu Orca Flash 4.0 Scientfic CMOS Camera
#
# EPICS DB file for records specific to this model of camera
#
# Protocol root must match db filename root
# i.e. hamaOrcaFlash4_0.proto

record( stringin, "$(P)$(R)COM_TEST" )
{
	field( DESC, "Communication Test" )
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto ComTest $(PORT).SER" )
	field( SCAN, "Passive" )
	field( PINI, "YES" )
}

record( stringin, "$(P)$(R)OrcaInfo_RBV" )
{
	field( DESC, "Orca Camera Info" )
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetInfo $(PORT).SER" )
	field( SCAN, "Passive" )
	field( PINI, "YES" )
#  info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

record( stringin, "$(P)$(R)OrcaModel_RBV" )
{
	field( DESC, "Orca Camera Model" )
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetModel $(PORT).SER" )
	field( SCAN, "Passive" )
	field( PINI, "YES" )
#  info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

record( stringin, "$(P)$(R)OrcaSerialNumber_RBV" )
{
	field( DESC, "Orca Serial Number" )
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetSerialNumber $(PORT).SER" )
	field( SCAN, "Passive" )
	field( PINI, "YES" )
#  info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

record( stringin, "$(P)$(R)OrcaFirmware_RBV" )
{
	field( DESC, "Orca Firmware" )
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetFirmware $(PORT).SER" )
	field( PINI, "YES" )
#  info( autosaveFields, "VAL" )
	info( archiveFields,  "VAL" )
}

record( longin, "$(P)$(R)OrcaHeight_RBV" )
{
	field( DESC, "Orca CCD Height" )
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetHeight $(PORT).SER" )
	field( EGU,  "Px" )
	field( PINI, "YES" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV VAL" )
}

record( longin, "$(P)$(R)OrcaWidth_RBV" )
{
	field( DESC, "Orca CCD Width" )
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetWidth $(PORT).SER" )
	field( EGU,  "Px" )
	field( PINI, "YES" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV VAL" )
}

# Read ORCA Actual Exposure Time
record( ai, "$(P)$(R)OrcaActualExposure_RBV" )
{
	field( DESC, "Orca Actual Exposure" )
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetActualExposure $(PORT).SER" )
	field( EGU,  "sec" )
	field( PREC, "5" )
	field( PINI, "YES" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}

record( mbbo, "$(P)$(R)OrcaExtTrigMode" )
{
	field( DTYP, "stream" )
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)ExtTrigMode NPP NMS" )
	field( OUT,  "@hamaOrcaFlash4_0.proto SetExtTrigMode $(PORT).SER" )
	field( ZRVL, "0" )	field( ZRST, "Edge" )
	field( ONVL, "1" )	field( ONST, "Level" )
	field( TWVL, "2" )	field( TWST, "Sync" )
	field( FLNK, "$(P)$(R)OrcaExtTrigMode_RBV" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV VAL" )
}

# Read ORCA ExtTrigMode
record( mbbi, "$(P)$(R)OrcaExtTrigMode_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetExtTrigMode $(PORT).SER" )
	field( ZRVL, "0" )	field( ZRST, "Edge" )
	field( ONVL, "1" )	field( ONST, "Level" )
	field( TWVL, "2" )	field( TWST, "Sync" )
	field( PINI, "YES" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV VAL" )
}

# Disable these records from ADBase.template as the Orca doesn't support them
record( ao, "$(P)$(R)Gain"			) { field( DISA, "1" ) }
record( ai, "$(P)$(R)Gain_RBV"		) { field( DISA, "1" ) }

# Set ORCA AcquireTime (Exposure Time)
# Note: It would be simpler if this PV could replace the
# PV $(P)$(R)AcquireTime from ADBase.template
# However, when I tried that, the system would hang in the dbior() call.
# It could be because this PV uses a different asyn PORT than the
# one it wants to replace.
# TODO: See if there's a way to handle this in asyn
#
# For now, I replace the FLNK in ADBase.template's AcquireTime PV
# and add a SerAcquireTime param to the edtPdvCamera class which
# maps the SerAcquireTime value to ADAcquireTime
record( ao, "$(P)$(R)AcquireTime" )
{
	field( FLNK, "$(P)$(R)OrcaAcquireTime" )
}
record( ao, "$(P)$(R)OrcaAcquireTime" )
{
	field( DTYP, "stream" )
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)AcquireTime NPP NMS"  )
	field( OUT,  "@hamaOrcaFlash4_0.proto SetAcquireTime $(PORT).SER" )
	field( EGU,  "sec" )
	field( PREC, "5" )
	field( FLNK, "$(P)$(R)OrcaAcquireTime_RBV" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}
# Read ORCA AcquireTime (Exposure Time)
record( ai, "$(P)$(R)OrcaAcquireTime_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetAcquireTime $(PORT).SER" )
	field( EGU,  "sec" )
	field( PREC, "5" )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)SerAcquireTime_RBV" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}
record( ao, "$(P)$(R)SerAcquireTime_RBV" )
{
	field( DTYP, "asynFloat64" )
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)OrcaAcquireTime_RBV NPP MS" )
	field( OUT,  "@asyn($(PORT),0,1)EDT_SER_ACQUIRE_TIME" )
	field( PREC, "3" )
}

# Set ORCA TriggerMode
record( mbbo, "$(P)$(R)TriggerMode" )
{
	field( FLNK, "$(P)$(R)OrcaTriggerMode" )
}
record( mbbo, "$(P)$(R)OrcaTriggerMode" )
{
	field( DTYP, "stream" )
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)TriggerMode NPP NMS" )
	field( OUT,  "@hamaOrcaFlash4_0.proto SetTriggerMode $(PORT).SER" )
	field( ZRVL, "0" )	field( ZRST, "Internal" )
	field( ONVL, "1" )	field( ONST, "External" )
	field( FLNK, "$(P)$(R)OrcaTriggerMode_RBV" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV VAL" )
}

# Read ORCA TriggerMode
record( mbbi, "$(P)$(R)OrcaTriggerMode_RBV" )
{
	field( DTYP, "stream" )
	field( INP,  "@hamaOrcaFlash4_0.proto GetTriggerMode $(PORT).SER" )
	field( ZRVL, "0" )	field( ZRST, "Internal" )
	field( ONVL, "1" )	field( ONST, "External" )
	field( FLNK, "$(P)$(R)SerTriggerMode_RBV" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV VAL" )
}
record( mbbo, "$(P)$(R)SerTriggerMode_RBV" )
{
	field( DTYP, "asynInt32" )
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)OrcaTriggerMode_RBV NPP MS" )
	field( OUT,  "@asyn($(PORT),0,1)EDT_SER_TRIGGER_MODE" )
	field( ZRVL, "0" )	field( ZRST, "Internal" )
	field( ONVL, "1" )	field( ONST, "External" )
}
