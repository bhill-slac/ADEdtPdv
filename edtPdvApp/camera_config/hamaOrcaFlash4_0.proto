#
PeekSize        = 0;
Terminator      = CR;
# InTerminator	= LF;
# OutTerminator	= LF;
ReplyTimeout	= 500;
ReadTimeout		= 100;
WriteTimeout	= 100;
ExtraInput		= Ignore;
#ExtraInput		= Error;

# Safe command to send to test communications
ComTest
{
	out	"?CAI T";
	in	 "CAI T %s";
}

# Get firmware version
GetFirmware
{
	out	"?VER";
	in	 "VER %s";
}

# Get info string
GetInfo
{
	out	"?INF";
	in	 "INF %s";
}

# Get camera model name
GetModel
{
	out	"?CAI T";
	in	 "CAI T %s";
}

# Get camera serial number
GetSerialNumber
{
	out	"?CAI N";
	in	 "CAI N %s";
}

# GetHeight - CCD Effective Vertical Pixel count
GetHeight
{
	out	"?CAI V";
	in	 "CAI V %d";
}

# GetWidth - CCD Effective Horizontal Pixel count
GetWidth
{
	out	"?CAI H";
	in	 "CAI H %d";
}

GetActualExposure
{
	out "?RAT";
	in	 "RAT %f";
}

GetAcquireTime
{
	out "?AET";
	in	 "AET %f";
}

SetAcquireTime
{
	out "AET %f";
	in	"AET %*f";
}

# Get Start Exposure Timing Mode
#	0	= Normal free run
#	1	= External trigger
#	2	= Start (Ext trig initiates free run)
#	3	= Light sheet (Like a copy machine, readout follows
#                      a sheet of light across the sample)
GetTriggerMode
{
	out "?AMD";
	in	 "AMD %{N|E|S|L}";
}

# Set Start Exposure Timing Mode
#	0	= Normal free run
#	1	= External trigger
#	2	= Start (Ext trig initiates free run)
#	3	= Light sheet (Like a copy machine, readout follows
#                      a sheet of light across the sample)
SetTriggerMode
{
	out "AMD %{N|E|S|L}";
	in  "AMD %*{N|E|S|L}";
}

# Get External Trigger Delay
GetExtTrigDelay
{
	out "?ATD";
	in	 "ATD %f";
}

# Set External Trigger Delay
SetExtTrigDelay
{
	out "ATD %f";
	in	"ATD %*f";
}

# Get External Trigger Exposure Mode
#	0	= Edge, Exposure time from AET
#	1	= Level, Exposure time from pulse duration
#	2	= Synchronous, Exposes from trigger to trigger
GetExtTrigMode
{
	out "?EMD";
	in	 "EMD %{E|L|S}";
}

# Set External Trigger Exposure Mode
#	0	= Edge
#	1	= Level
#	2	= Synchronous
SetExtTrigMode
{
	out "EMD %{E|L|S}";
	in	"EMD %*{E|L|S}";
}

# Get External Trigger Polarity
#	0	= Negative
#	1	= Positive
GetExtTrigPolarity
{
	out "?ATP";
	in	 "ATP %{N|P}";
}

# Set External Trigger Exposure Polarity
#	0	= Negative
#	1	= Positive
SetExtTrigPolarity
{
	out "ATP %{N|P}";
	in	"ATP %*{N|P}";
}

# Get Scanning Mode
#	0	= Normal
#	1	= Binning
#	2	= Sub-array (Vertical Double Scan)
GetScanMode
{
	out "?SMD";	
	in	 "SMD %{N|S|W}";
}

# Set Scanning Mode
#	0	= Normal
#	1	= Binning
#	2	= Sub-array (Vertical Double Scan)
SetScanMode
{
	out "SMD %{N|S|W}";
	in  "SMD %*{N|S|W}";
}

# Get Scanning Speed
#	0	= Std speed
#	1	= Slow speed
GetScanSpeed
{
	out "?SMD";	
	in	 "SMD %{H|S}";
}

# Set Scanning Speed
#	0	= Std speed
#	1	= Slow speed
SetScanSpeed
{
	out "SMD %{H|S}";
	in  "SMD %*{H|S}";
}

# ROI Control
# ROI is implemented via Vertical Double Scan, or Sub-Array scanning mode, SMD W
# Vertical Double Scan parameters are:
#	Top Offset:	Same as AreaDetector MinX
#	Bot Offset: Should be zero unless you want a gap between top and bottom regions
#	Vert Size:	Should be 1024 - VertDblScanTop to readout a symmetrical region around the center
# Constraints:
#	All params must be multiples of 4
#	vert size + either offset <= 1024
# Matt says it's
# SDV bo,to,size
# where:
# bo	- # lines offset from bottom
# to	- # lines offset from center
# size	- # lines to readout in each half (ROI size/2)
# so SDV 924,0,100 for 200 line readout starting at line 924
GetVertDblScan
{
	out "?SDV";
	in	"SDV %(\$1OrcaScanTop_RBV)u,%(\$1OrcaScanBot_RBV)u,%u";
}

# Vertical Double Scan parameters are:
#	Top Offset:	Same as AreaDetector MinX
#	Bot Offset: Should be zero unless you want a gap between top and bottom regions
#	Vert Size:	Should be 1024 - VertDblScanTop to readout a symmetrical region around the center
SetVertDblScan
{
	out	"SDV %(\$1OrcaScanTop)u,%(\$1OrcaScanBot)u,%u";
	in	"SDV %(\$1OrcaScanTop_RBV)u,%(\$1OrcaScanBot_RBV)u,%(\$1OrcaScanSize_RBV)u";
}

# SPX {1|2|4} Set binning factor
# PEC {F|O} Pixel Error Corr Off|On
