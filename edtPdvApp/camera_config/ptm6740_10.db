#
# EPICS database for
# Pulnix 6740 Camera in 10 bit mode
#

record( stringin, "$(P)$(R)EdtModel" )
{
	field( VAL,  "ptm6740_10" )
	field( PINI, "YES" )
}

# Redirect FLNK's from Gain to EdtGain to PulnixGain
# Gain and EdtGain use range 0..100
record( ao, "$(P)$(R)Gain" )
{
	field( DRVH, "100" )
	field( DRVL, "0" )
	field( HOPR, "100" )
	field( LOPR, "0" )
	field( FLNK, "$(P)$(R)EdtGain" )
}
record( ao, "$(P)$(R)EdtGain" )
{
	field( DRVH, "100" )
	field( DRVL, "0" )
	field( HOPR, "100" )
	field( LOPR, "0" )
	field( FLNK, "$(P)$(R)PulnixGain" )
}
#
# The Pulnix camera has 2 gain controls, A & B
# with range 0x042 to 0x1E8
# For compatibility w/ ADCore's single gain control,
# a PulnixGainCalc transform record is used
record( dfanout, "$(P)$(R)PulnixGain" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)EdtGain MS" )
	field( DESC, "Set camera gain" )
	field( HOPR, "100" )
	field( LOPR, "0" )
	field( OUTA, "$(P)$(R)PulnixGainCalc.G PP" )
}
record( dfanout, "$(P)$(R)PulnixGainA" )
{
	field( DESC, "Gain for side A" )
	field( OUTA, "$(P)$(R)PulnixGainCalc.A PP" )
	field( PINI, "YES" )
	info( autosaveFields, "VAL" )
}
record( dfanout, "$(P)$(R)PulnixGainB" )
{
	field( DESC, "Gain for side B" )
	field( OUTA, "$(P)$(R)PulnixGainCalc.B PP" )
	field( PINI, "YES" )
	info( autosaveFields, "VAL" )
}
record( dfanout, "$(P)$(R)PulnixGainOffset" )
{
	field( DESC, "Offset between gain halves" )
	field( DOL,	 "0" )
	field( OUTA, "$(P)$(R)PulnixGainCalc.O PP" )
	info( autosaveFields, "VAL" )
}

#
# Transform record to allow independent manipulation of
# overall gain, gain for ch A, gain for ch B, and gain offset
# between ch A and B.
# Inputs:
#	INPA	Gain for Ch A, range 0x
#	INPB	Gain for Ch B
#	INPG	Overall Gain, range 0..100
#	INPO	Offset between A and B, -100 to 100
# Outputs:
#	OUTA	Gain for Ch A, range 0x42 to 0x1E8
#	OUTB	Gain for Ch B, range 0x42 to 0x1E8
#	OUTG	Overall Gain, range 0..100
#	OUTO	Offset between A and B, -100 to 100
record( transform, "$(P)$(R)PulnixGainCalc" )
{
	field( DESC, "Calc camera gain" )

# These are commented out as calc module
# doesn't do any calculations which have an input link.
# See Tech-talk Sept 2011 discussion re "Transorm Record no_inlink test"
# Thus, we use dfanout records above to write
# to $(P)$(R)PulnixGainCalc.A, B, G, and O
#	field( INPA, "$(P)$(R)PulnixGainA" )
#	field( INPB, "$(P)$(R)PulnixGainB" )
#	field( INPG, "$(P)$(R)PulnixGain" )
#	field( INPO, "$(P)$(R)PulnixGain:Offset" )
#
# 	The COPT field is only supported in calc 2.6.4 or
#	greater and it doesn't do what we want.
#	If we set the COPT field, it will always
#	redo every calc in the order CLCA, CLCB, CLCG, CLCO
#	field( COPT, "Always" )

	field( INPH, "0x1E8" )
	field( INPL, "0x042" )
	field( CLCA, "(G/100)*(H-L)+L-(O/2)" )
	field( CLCB, "(G/100)*(H-L)+L+(O/2)" )
	field( CLCG, "(((A+B)/2)-L)*100/(H-L)" )
	field( CLCO, "B-A" )
	field( OUTA, "$(P)$(R)PulnixGainA PP" )
	field( OUTB, "$(P)$(R)PulnixGainB PP" )
	field( OUTG, "$(P)$(R)PulnixGain PP" )
	field( OUTO, "$(P)$(R)PulnixGain:Offset PP" )
}

# These records monitor their dfanout equivalents
# and send the value to the camera via the serial port
# We need this record in addition to PulnixGainA because
# $(P)$(R)PulnixGainA needs to use an output field to
# write to $(P)$(R)PulnixGainCalc.A
# while this serial control record needs to use it's output
# field to specify the protocol command
record( longout, "$(P)$(R)PulnixSetGainA" )
{
	field( DESC, "Set camera gain A" )
	field( OMSL, "closed_loop" )
	field( DOL,	 "$(P)$(R)PulnixGainA CPP" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm6740_10.proto SetGainA $(PORT).SER" )
	field( DRVH, "0x1E8" )
	field( DRVL, "0x042" )
}
record( longout, "$(P)$(R)PulnixSetGainB" )
{
	field( DESC, "Set camera gain B" )
	field( OMSL, "closed_loop" )
	field( DOL,	 "$(P)$(R)PulnixGainB CPP" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm6740_10.proto SetGainB $(PORT).SER" )
	field( DRVH, "0x1E8" )
	field( DRVL, "0x042" )
}

# Reference voltage commands
record( longout, "$(P)$(R)PulnixRefVoltA" )
{
	field( DESC, "Set ref voltage for ch A" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm6740_10.proto SetRefVoltA $(PORT).SER" )
	field( DRVL, "0x000" )
	field( DRVH, "0x1FF" )
	field( PINI, "YES" )
	info( autosaveFields, "VAL" )
}
record( longin, "$(P)$(R)PulnixRefVoltA_RBV" )
{
	field( DESC, "Get ref voltage for ch A" )
	field( DTYP, "stream" )
	field( INP,	 "@ptm6740_10.proto GetRefVoltA $(PORT).SER" )
	field( PINI, "YES" )
	info( autosaveFields, "VAL" )
}


record( longout, "$(P)$(R)PulnixRefVoltB" )
{
	field( DESC, "Set ref voltage for ch B" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm6740_10.proto SetRefVoltB $(PORT).SER" )
	field( DRVL, "0x000" )
	field( DRVH, "0x1FF" )
	field( PINI, "YES" )
	info( autosaveFields, "VAL" )
}
record( longin, "$(P)$(R)PulnixRefVoltB_RBV" )
{
	field( DESC, "Get ref voltage for ch B" )
	field( DTYP, "stream" )
	field( INP,	 "@ptm6740_10.proto GetRefVoltB $(PORT).SER" )
	field( PINI, "YES" )
	info( autosaveFields, "VAL" )
}

record( ao, "$(P)$(R)AcquireTime" )
{
	field( FLNK, "$(P)$(R)PulnixFreeRunAcquireTime" )
	field( PREC, "5" )
}

# PulnixFreeRunAcquireTime
# Map AcquireTime in sec to Pulnix manual shutter values
# Pulnix ManualShutter Values
#	0	-	Manual No Shutter
#	1-8	-	1=1/250, 2=2/500, 3=1/1000, 4=1/2000, 5=1/4000, 6=1/8000, 7=1/16000, 8=1/32000, 9=1/64000
# Internal shutter speeds are powers of 2 relative to 1/250, so
# A = 1/(250*2**(X-1)
# 2**(X-1) = (0.004/A)
# (X-1) = LN(0.004/A)/LN(2)
# X = LN(0.004/A)/LN(2) + 1
record( calc, "$(P)$(R)PulnixFreeRunAcquireTime" )
{
	field( INPA,  "$(P)$(R)AcquireTime NPP NMS"  )
	field( CALC,  "MAX(0,MIN(9,LN(0.004/A)/LN(2)+1))" )
	field( PREC, "0" )
	field( TPRO, "2" )
	field( FLNK, "$(P)$(R)PulnixExtTrigAcquireTime" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}
# PulnixExtTrigAcquireTime
# Map AcquireTime in sec to Pulnix internal shutter values
# Pulnix InternalShutter X: 1=1/64000, 2=1/32000, 3=1/16000, 4=1/8000, 5=1/4000, 6=1/2000, 7=1/1000,8=1/500
# Internal shutter speeds are powers of 2 relative to 1/500, so
# A = 1/(500*2**(8-X)
# 2**(8-X) = (0.002/A)
# (8-X) = LN(0.002/A)/LN(2)
# X = 8 - LN(0.002/A)/LN(2)
record( calcout, "$(P)$(R)PulnixExtTrigAcquireTime" )
{
	field( INPA,  "$(P)$(R)AcquireTime NPP NMS"  )
	field( CALC,  "MAX(1,MIN(8,8-LN(.002/A)/LN(2)))" )
	field( PREC, "0" )
	field( TPRO, "2" )
	field( FLNK, "$(P)$(R)PulnixPulseAcquireTime" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}
# PulnixPulseAcquireTime
# For pulse width, we use Async setting 9 and
# write the AcquireTime to the trigger pulse width
record( calcout, "$(P)$(R)PulnixPulseAcquireTime" )
{
	field( INPA, "$(P)$(R)AcquireTime NPP NMS"  )
	field( CALC, "9" )
	field( PREC, "0" )
	field( TPRO, "2" )
	field( DOPT, "Use OCAL" )
	field( OOPT, "On Change" )
	field( OCAL, "A*1e9" )
	field( OUT,  "$(PWIDTH=)" )
	field( FLNK, "$(P)$(R)PulnixShutterCmdSelect" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}

record( longin, "$(P)$(R)PulnixGetRawShutter" )
{
	field( DESC, "Raw Numeric shutter value" )
	field( DTYP, "stream" )
	field( INP,	 "@ptm6740_10.proto GetShutter $(PORT).SER " )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)PulnixShutterReadSelect" )
}

record( longout, "$(P)$(R)PulnixRawShutter" )
{
	field( DESC, "Raw Numeric shutter value" )
	field( PINI, "YES" )
}

record( calc, "$(P)$(R)PulnixShutterReadSelect" )
{
	field( CALC, "A+1" )
	field( INPA, "$(P)$(R)PulnixTriggerMode" )
	field( FLNK, "$(P)$(R)PulnixShutterReadFanout" )
}

record( dfanout, "$(P)$(R)PulnixShutterReadFanout" )
{
	field( DESC, "Selects shutter read cmd" )
	field( OMSL, "closed_loop" )
#	field( DOL,	 "$(P)$(R)PulnixShutter" )
	field( DOL,	 "1" )
	field( SELL, "$(P)$(R)PulnixShutterReadSelect" )
	field( SELM, "Specified" )
	field( OUTA, "$(P)$(R)PulnixCalcFreeRunShutter.PROC PP" )
	field( OUTB, "$(P)$(R)PulnixCalcExtTrigShutter.PROC PP" )
	field( OUTC, "$(P)$(R)PulnixCalcPulseShutter.PROC PP" )
	field( PINI, "YES" )
}

# PulnixCalcFreeRunShutter
# Map Pulnix manual shutter values to AcquireTime in sec
# Pulnix ManualShutter Values
#	0	-	Manual No Shutter
#	1-8	-	1=1/250, 2=2/500, 3=1/1000, 4=1/2000, 5=1/4000, 6=1/8000, 7=1/16000, 8=1/32000, 9=1/64000
# Internal shutter speeds are powers of 2 relative to 1/250, so
# X = 1/(250*2**(A-1)
record( calcout, "$(P)$(R)PulnixCalcFreeRunShutter" )
{
	field( INPA,  "$(P)$(R)PulnixGetRawShutter NPP NMS" )
	field( CALC,  "1/(250*2**(A-1))" )
	field( PREC, "5" )
	field( TPRO, "2" )
	field( OOPT, "On Change" )
	field( OUT,  "$(P)$(R)EdtAcquireTime_RBV PP MS" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}
# PulnixCalcExtTrigShutter
# Map AcquireTime in sec to Pulnix internal shutter values
# Pulnix InternalShutter X: 1=1/64000, 2=1/32000, 3=1/16000, 4=1/8000, 5=1/4000, 6=1/2000, 7=1/1000,8=1/500
# Internal shutter speeds are powers of 2 relative to 1/500, so
# X = 1/(500*2**(8-A)
record( calcout, "$(P)$(R)PulnixCalcExtTrigShutter" )
{
	field( INPA, "$(P)$(R)PulnixGetRawShutter NPP NMS" )
	field( CALC, "1/(500*2**(8-A))" )
	field( PREC, "5" )
	field( TPRO, "2" )
	field( OOPT, "On Change" )
	field( OUT,  "$(P)$(R)EdtAcquireTime_RBV PP MS" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}
# PulnixCalcPulseShutter
# For pulse width, we use Async setting 9 and
# write the AcquireTime to the trigger pulse width
record( calcout, "$(P)$(R)PulnixCalcPulseShutter" )
{
	field( INPA, "$(PW_RBV) NPP NMS" )
	field( CALC, "A/1e9" )
	field( PREC, "5" )
	field( TPRO, "2" )
	field( OOPT, "On Change" )
	field( OUT,  "$(P)$(R)EdtAcquireTime_RBV PP MS" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}

# Make EdtTriggerMode FLNK to PulnixTriggerMode
record( mbbo, "$(P)$(R)EdtTriggerMode" )
{
	field( FLNK, "$(P)$(R)PulnixTriggerMode" )
}
record( mbbo, "$(P)$(R)PulnixTriggerMode" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)EdtTriggerMode NPP NMS" )
	field( ZRVL, "0" )	field( ZRST, "FreeRun" )
	field( ONVL, "1" )	field( ONST, "External" )
	field( TWVL, "2" )	field( TWST, "Pulse" )
	field( FLNK, "$(P)$(R)PulnixShutterCmdSelect" )
}
#
record( longin, "$(P)$(R)PulnixGetRawTriggerMode" )
{
	field( DESC, "Raw Numeric shutter value" )
	field( DTYP, "stream" )
	field( INP,	 "@ptm6740_10.proto GetTriggerMode $(PORT).SER " )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)PulnixCalcTriggerMode" )
}
record( calcout, "$(P)$(R)PulnixCalcTriggerMode" )
{
	field( INPA,  "$(P)$(R)PulnixGetRawTriggerMode NPP NMS"  )
	field( INPB,  "$(P)$(R)PulnixGetRawShutter PP NMS"  )
	field( CALC,  "A==0?0:(A==1?(B!=9?1:2):3)" )
	field( PREC, "0" )
	field( OUT,  "$(P)$(R)PulnixTriggerMode_RBV PP MS" )
	field( TPRO, "2" )
	field( FLNK, "$(P)$(R)PulnixPulseAcquireTime" )
}
record( mbbi, "$(P)$(R)PulnixTriggerMode_RBV" )
{
	field( ZRVL, "0" )	field( ZRST, "FreeRun" )
	field( ONVL, "1" )	field( ONST, "External" )
	field( TWVL, "2" )	field( TWST, "Pulse" )
	field( THVL, "3" )	field( THST, "Direct" )
	field( FLNK, "$(P)$(R)EdtTriggerMode_RBV" )
}
# Make EdtTriggerMode_RBV get it's value from PulnixTriggerMode_RBV
record( mbbo, "$(P)$(R)EdtTriggerMode_RBV" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)PulnixTriggerMode_RBV NPP MS" )
}

record( calc, "$(P)$(R)PulnixShutterCmdSelect" )
{
	field( CALC, "A+1" )
	field( INPA, "$(P)$(R)PulnixTriggerMode" )
	field( FLNK, "$(P)$(R)PulnixShutterCmdFanout" )
}

record( dfanout, "$(P)$(R)PulnixShutterCmdFanout" )
{
	field( DESC, "Selects shutter cmd" )
	field( OMSL, "closed_loop" )
#	field( DOL,	 "$(P)$(R)PulnixShutter" )
	field( DOL,	 "1" )
	field( SELL, "$(P)$(R)PulnixShutterCmdSelect" )
	field( SELM, "Specified" )
	field( OUTA, "$(P)$(R)PulnixSetFreeRunShutter.PROC PP" )
	field( OUTB, "$(P)$(R)PulnixSetExtTrigShutter.PROC PP" )
	field( OUTC, "$(P)$(R)PulnixSetPulseShutter.PROC PP" )
	field( PINI, "YES" )
	field( FLNK, "$(P)$(R)PulnixGetRawTriggerMode" )
}

record( longout, "$(P)$(R)PulnixSetExtTrigShutter" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)PulnixExtTrigAcquireTime NPP NMS" )
	field( DESC, "Select Async shutter speeds" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm6740_10.proto SetAsyncShutter $(PORT).SER " )
	field( FLNK, "$(P)$(R)PulnixGetRawShutter PP" )
}

record( longout, "$(P)$(R)PulnixSetDirectShutter" )
{
	field( DESC, "Direct shutter setting" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm6740_10.proto SetDirectShutter $(PORT).SER " )
	field( FLNK, "$(P)$(R)PulnixGetRawShutter PP" )
}

record( longout, "$(P)$(R)PulnixSetPulseShutter" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)PulnixPulseAcquireTime NPP NMS" )
	field( DESC, "Select Async pulse width shutter" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm6740_10.proto SetAsyncShutter $(PORT).SER " )
	field( FLNK, "$(P)$(R)PulnixSetTrigPulseWidth" )
}
record( calcout, "$(P)$(R)PulnixSetTrigPulseWidth" )
{
	field( INPA, "$(P)$(R)AcquireTime NPP NMS"  )
	field( CALC, "A*1e9" )
	field( PREC, "0" )
	field( TPRO, "2" )
	field( OUT,  "$(PWIDTH=)" )
	field( FLNK, "$(P)$(R)PulnixGetRawShutter" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV PREC VAL" )
}

record( longout, "$(P)$(R)PulnixSetFreeRunShutter" )
{
	field( OMSL, "closed_loop" )
	field( DOL,  "$(P)$(R)PulnixFreeRunAcquireTime NPP NMS" )
	field( DESC, "Select FreeRun shutter speeds" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm6740_10.proto SetManualShutter $(PORT).SER " )
	field( FLNK, "$(P)$(R)PulnixGetRawShutter PP" )
}

#record( mbbi, "$(P)$(R)PulnixShutter" )
#{
#	field( DESC, "Camera shutter speed" )
#	field( ZRVL, "0"	) field( ZRST, "1/250"	)
#	field( ONVL, "1"	) field( ONST, "1/500"	)
#	field( TWVL, "2"	) field( TWST, "1/1000"	)
#	field( THVL, "3"	) field( THST, "1/2000"	)
#	field( FRVL, "4"	) field( FRST, "1/4000"	 )
#	field( FVVL, "5"	) field( FVST, "1/8000"	 )
#	field( SXVL, "6"	) field( SXST, "1/16000" )
#	field( SVVL, "7"	) field( SVST, "1/32000" )
#	field( EIVL, "8"	) field( EIST, "1/64000" )
#	field( NIVL, "9"	) field( NIST, "Pulse"	 )
#	field( FLNK, "$(P)$(R)PulnixTriggerModeFanout PP" )
#	field( PINI, "YES" )
#}

record( bo, "$(P)$(R)PulnixAutoGain" )
{
	field( DESC, "Auto Gain Balance" )
	field( DTYP, "stream" )
	field( OUT,	 "@ptm6740_10.proto SetAutoGain $(PORT).SER" )
	field( ZNAM, "Disabled" )
	field( ONAM, "Enabled" )
}

record( stringin, "$(P)$(R)PulnixID" )
{
	field( DESC, "Camera reported model" )
	field( DTYP, "stream" )
	field( INP,	 "@ptm6740_10.proto GetModel $(PORT).SER" )
	field( PINI, "YES" )
}

record( stringin, "$(P)$(R)PulnixGetRawVers" )
{
	field( DESC, "Camera reported vers" )
	field( DTYP, "stream" )
	field( INP,	 "@ptm6740_10.proto GetVers $(PORT).SER" )
	field( PINI, "YES" )
}
